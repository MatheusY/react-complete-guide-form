{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Dev/Projects/react-complete-guide-form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = validateEmail(enteredEmail);\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n    setEnteredEmailTouched(true);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || emailInputIsInvalid) {\n      return;\n    }\n\n    console.log(enteredName);\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClass = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClass = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClass,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"yMQKhYN5YQ5tx2dp33PursZcVS4=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/home/matheus/Dev/Projects/react-complete-guide-form/src/components/SimpleInput.js"],"names":["useState","useInput","validateEmail","email","re","test","String","toLowerCase","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","valueBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","emailInputIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClass","emailInputClass"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst validateEmail = (email) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = validateEmail(enteredEmail);\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n\n    setEnteredEmailTouched(true);\n  };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || emailInputIsInvalid) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClass = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClass = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClass}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredName}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty!</p>\n        )}\n      </div>\n      <div className={emailInputClass}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={enteredEmail}\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n        />\n        {emailInputIsInvalid && <p className=\"error-text\">Invalid email!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}